{"version":3,"sources":["img/logo.png","img/player.png","components/image-results/ImageResults.js","components/image-random/ImageRandom.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ImageResults","document","getElementById","style","display","images","this","props","react_default","a","createElement","className","map","img","id","src","webformatURL","alt","tags","Component","ImageRandom","image","tag","largeImageURL","Search","state","searchText","amount","apiUrl","apiKey","handleSubmit","e","_this","setState","Object","defineProperty","target","name","value","axios","get","concat","then","res","data","hits","catch","err","console","log","_this2","response","logo","onChange","user","class","image_random_ImageRandom","image_results_ImageResults","App","components_search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gUCkCzBC,yLA1BfC,SAASC,eAAe,YAAYC,MAAMC,QAAQ,yCAKvC,IACCC,EAAWC,KAAKC,MAAhBF,OACR,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVN,EAAOO,IAAI,SAAAC,GAAG,OACVL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMG,GAAID,EAAIC,IAC5BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAYI,IAAKF,EAAIG,aAAcC,IAAKJ,EAAIK,kBAfhDC,cC0BZC,gMApBZ,IACSC,EAAUf,KAAKC,MAAfc,MACT,OACGb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVU,EAAMT,IAAI,SAAAC,GAAG,OACVL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMG,GAAID,EAAIC,IACzBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWM,IAAKJ,EAAIS,IAAKP,IAAKF,EAAIU,2BATzCJ,wDC+DXK,6MA7DdC,MAAO,CACAC,WAAY,GACZC,OAAQ,GACRC,OAAQ,2BACRC,OAAQ,mCACRxB,OAAQ,GACRgB,MAAO,MAIfS,aAAe,SAAAC,GACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAgBH,EAAEK,OAAOC,KAAON,EAAEK,OAAOE,OAAQ,WACzCC,IAAMC,IAAN,GAAAC,OAAaT,EAAKP,MAAMG,OAAxB,UAAAa,OAAuCT,EAAKP,MAAMI,OAAlD,OAAAY,OAA8DT,EAAKP,MAAMC,WAAzE,+BAAAe,OAAiHT,EAAKP,MAAME,OAA5H,0CACCe,KAAK,SAAAC,GAAG,OAAIX,EAAKC,SAAS,CAAC5B,OAAQsC,EAAIC,KAAKC,SAC5CC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAE9B9C,SAASC,eAAe,eAAeC,MAAMC,QAAQ,2FAGtC,IAAA8C,EAAA5C,KAClBiC,IAAMC,IAAN,GAAAC,OAAanC,KAAKmB,MAAMG,OAAxB,UAAAa,OAAuCnC,KAAKmB,MAAMI,OAAlD,+BAAAY,OAAsFnC,KAAKmB,MAAME,OAAjG,0CACCe,KAAK,SAAAS,GAAQ,OAAID,EAAKjB,SAAS,CAACZ,MAAO8B,EAASP,KAAKC,SACrDC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCAKxB,OACEvC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,OAAKO,IAAI,OAAOF,IAAKqC,OAC1C5C,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAe0B,KAAK,aACrCC,MAAOhC,KAAKmB,MAAMC,WAClB2B,SAAU/C,KAAKwB,gBAGjBtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,UACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,OAAKO,IAAI,OAAOF,IAAKuC,OAC/C9C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,cACAH,EAAAC,EAAAC,cAAA,KAAG6C,MAAM,mCACT/C,EAAAC,EAAAC,cAAA,KAAG6C,MAAM,2BACT/C,EAAAC,EAAAC,cAAA,KAAG6C,MAAM,mCAMb/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,OAAKI,GAAG,eAAcN,EAAAC,EAAAC,cAAC8C,EAAD,CAAanC,MAAOf,KAAKmB,MAAMJ,SAErDb,EAAAC,EAAAC,cAAC+C,EAAD,CAAcpD,OAAQC,KAAKmB,MAAMpB,kBAvDpBc,aCONuC,0LATX,OACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiD,EAAD,cAJUxC,cCQEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASlE,SAASC,eAAe,SD2H3C,kBAAmBkE,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.e4841789.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.899cd5e1.png\";","module.exports = __webpack_public_path__ + \"static/media/player.f45826a8.png\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './ImageResult.css';\n;\nclass ImageResults extends Component {\n    \nmodal(){\n     \ndocument.getElementById('modalBox').style.display=\"block\";\n      \n\n  }\n\n  render() { \n    const { images } = this.props;\n    return (\n      <div className=\"columns\">\n          {images.map(img => (\n               <div className=\"tag\" id={img.id}>\n                <img className=\"tagImage\"  src={img.webformatURL} alt={img.tags}/>\n               </div>\n               \n   \n          ))}\n\n        \n\n      </div>\n    )\n  }\n}\nImageResults.propTypes = {\n    images: PropTypes.array.isRequired\n}\nexport default ImageResults;\n\n","import React, { Component, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './imagerandom.css';\nimport useInfiniteScroll from \"../useInfiniteScroll\";\n\n\n\nclass ImageRandom extends Component {\n    \n render()\n   { \n    const { image } = this.props;\n   return (\n      <div className=\"columns\">\n          {image.map(img => (\n              <div className=\"tag\" id={img.id}>\n                  <img className=\"tagImage\" alt={img.tag} src={img.largeImageURL}/>\n              </div>\n\n          ))}\n          {/* {isFetching && 'Fetching more list items...'} */}\n\n      </div>\n    )\n  }\n}\n\nImageRandom.propTypes = {\n    image: PropTypes.array.isRequired\n}\nexport default ImageRandom;\n\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport ImageResults from '../image-results/ImageResults';\nimport ImageRandom from '../image-random/ImageRandom';\nimport './Search.css';\nimport logo from '../../img/logo.png';\nimport user from '../../img/player.png';\n\nclass Search extends Component {\n state ={\n        searchText: '',\n        amount: 20,\n        apiUrl: 'https://pixabay.com/api/',\n        apiKey: '968305-23d6df71958191317ed0f09cd',\n        images: [],\n        image: []\n      }\n\n \nhandleSubmit = e =>{\n this.setState({[e.target.name]: e.target.value}, () => {\n         axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true&orientation=vertical`)\n         .then(res => this.setState({images: res.data.hits}))\n         .catch(err => console.log(err));\n     });\n     document.getElementById('RandomImage').style.display=\"none\";\n };   \n \n componentDidMount(){\n  axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&image_type=photo&per_page=${this.state.amount}&safesearch=true&orientation=vertical`)\n  .then(response => this.setState({image: response.data.hits}))\n  .catch(err => console.log(err));\n\n }\n  render() {\n\n    return (\n      <div>\n      <header className=\"header-top\">\n\n          <div className=\"input-box\">\n         <div className=\"logo\"><img alt=\"logo\" src={logo}/></div>\n          <input className=\"input-search\" name=\"searchText\" \n          value={this.state.searchText} \n          onChange={this.handleSubmit}/>\n         </div>\n\n        <div className=\"login-box\">\n            <h5 className=\"text-title\">Inicio</h5>\n            <h5 className=\"text-title\">Siguiendo</h5>\n            <div className=\"user-box\"><img alt=\"user\" src={user}/></div>\n            <h5 className=\"text-title\">Juan Nieve</h5>\n            <i class=\"fas fa-comment-dots icon-class\"></i>\n            <i class=\"fas fa-bell icon-class\"></i>\n            <i class=\"fas fa-ellipsis-h icon-class\"></i>\n\n\n        </div>\n        </header>\n\n        <div className=\"container-img\">\n        <div id=\"RandomImage\"><ImageRandom image={this.state.image}/></div>\n        \n        <ImageResults images={this.state.images}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport Search from './components/search/Search';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Search />\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}